From 9683f7740f156e58aef414320ff5ce99bece7855 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Martin=20Storsj=C3=B6?= <martin@martin.st>
Date: Fri, 8 May 2020 14:24:57 +0300
Subject: [PATCH 5/8] Update the ffmpeg patches for MediaFoundation

Include a new patch for the movenc muxer, to try to grab HEVC
extradata from the first packet, if the encoder hasn't provided
it otherwise.

This fixes the generated mov/mp4 files written with content encoded
by the Qualcomm HEVC MediaFoundation encoder, but won't help for
other formats (e.g. like mkv).
---
 contrib/ffmpeg/A19-mf-encoder.patch           |  57 +++++----
 contrib/ffmpeg/A20-mf-encoder-extradata.patch |   4 +-
 contrib/ffmpeg/A21-mf-encoder-b-frames.patch  |   4 +-
 .../ffmpeg/A22-movenc-hevc-extradata.patch    | 117 ++++++++++++++++++
 4 files changed, 157 insertions(+), 25 deletions(-)
 create mode 100644 contrib/ffmpeg/A22-movenc-hevc-extradata.patch

diff --git a/contrib/ffmpeg/A19-mf-encoder.patch b/contrib/ffmpeg/A19-mf-encoder.patch
index 8ec8a6746..2384ad0dd 100644
--- a/contrib/ffmpeg/A19-mf-encoder.patch
+++ b/contrib/ffmpeg/A19-mf-encoder.patch
@@ -1,7 +1,7 @@
-From 7ce2fc7eb904a9d1f7654321b9bf4c8f03972322 Mon Sep 17 00:00:00 2001
+From cecbd1c237ad653d6f268e37a1c1654a01699e98 Mon Sep 17 00:00:00 2001
 From: wm4 <nfxjfg@googlemail.com>
 Date: Tue, 4 Apr 2017 07:45:41 +0200
-Subject: [PATCH 1/3] avcodec: Add MediaFoundation encoder wrapper
+Subject: [PATCH 1/4] avcodec: Add MediaFoundation encoder wrapper
 MIME-Version: 1.0
 Content-Type: text/plain; charset=UTF-8
 Content-Transfer-Encoding: 8bit
@@ -12,6 +12,21 @@ This contains changes done by Pawe≈Ç Wegner <pawel.wegner95@gmail.com>
 on top of an original patch by wm4 <nfxjfg@googlemail.com>.
 (The original patch supported both encoding and decoding; this only
 includes encoding).
+---
+This allows access to the HW video encoder on Windows on ARM64
+on Qualcomm platforms. However, to actually use that, one has to
+manually choose nv12 as input pixel format, otherwise the encoder
+format negotiation fails.
+
+I've tried to read up on the feedback this patch got the earlier
+times it was posted and address those issues. In particular,
+this is enabled automatically if suitable headers are available.
+The built binary still runs on Vista (even if the required MF
+functionality isn't available there).
+
+Building succeeds with MSVC, old and new mingw-w64 toolchains (but
+feel free to try it out on whatever you happen to have around),
+and isn't detected or enabled on old mingw.org toolchains.
 ---
  configure              |   11 +
  libavcodec/Makefile    |    1 +
@@ -25,10 +40,10 @@ includes encoding).
  create mode 100644 libavcodec/mfenc.c
 
 diff --git a/configure b/configure
-index 3fb8f3521d..1a27d15b26 100755
+index 080d93a129..5bfe8ca02b 100755
 --- a/configure
 +++ b/configure
-@@ -301,6 +301,7 @@ External library support:
+@@ -304,6 +304,7 @@ External library support:
    --enable-mbedtls         enable mbedTLS, needed for https support
                             if openssl, gnutls or libtls is not used [no]
    --enable-mediacodec      enable Android MediaCodec support [no]
@@ -36,7 +51,7 @@ index 3fb8f3521d..1a27d15b26 100755
    --enable-libmysofa       enable libmysofa, needed for sofalizer filter [no]
    --enable-openal          enable OpenAL 1.1 capture support [no]
    --enable-opencl          enable OpenCL processing [no]
-@@ -1699,6 +1700,7 @@ EXTERNAL_AUTODETECT_LIBRARY_LIST="
+@@ -1704,6 +1705,7 @@ EXTERNAL_AUTODETECT_LIBRARY_LIST="
      libxcb_shape
      libxcb_xfixes
      lzma
@@ -44,7 +59,7 @@ index 3fb8f3521d..1a27d15b26 100755
      schannel
      sdl2
      securetransport
-@@ -2985,6 +2987,8 @@ wmv3_vaapi_hwaccel_select="vc1_vaapi_hwaccel"
+@@ -3011,6 +3013,8 @@ wmv3_vaapi_hwaccel_select="vc1_vaapi_hwaccel"
  wmv3_vdpau_hwaccel_select="vc1_vdpau_hwaccel"
  
  # hardware-accelerated codecs
@@ -53,7 +68,7 @@ index 3fb8f3521d..1a27d15b26 100755
  omx_deps="libdl pthreads"
  omx_rpi_select="omx"
  qsv_deps="libmfx"
-@@ -3007,6 +3011,8 @@ nvenc_deps="ffnvcodec"
+@@ -3035,6 +3039,8 @@ nvenc_deps="ffnvcodec"
  nvenc_deps_any="libdl LoadLibrary"
  nvenc_encoder_deps="nvenc"
  
@@ -62,7 +77,7 @@ index 3fb8f3521d..1a27d15b26 100755
  h263_v4l2m2m_decoder_deps="v4l2_m2m h263_v4l2_m2m"
  h263_v4l2m2m_encoder_deps="v4l2_m2m h263_v4l2_m2m"
  h264_amf_encoder_deps="amf"
-@@ -3015,6 +3021,7 @@ h264_cuvid_decoder_deps="cuvid"
+@@ -3043,6 +3049,7 @@ h264_cuvid_decoder_deps="cuvid"
  h264_cuvid_decoder_select="h264_mp4toannexb_bsf"
  h264_mediacodec_decoder_deps="mediacodec"
  h264_mediacodec_decoder_select="h264_mp4toannexb_bsf h264_parser"
@@ -70,15 +85,15 @@ index 3fb8f3521d..1a27d15b26 100755
  h264_mmal_decoder_deps="mmal"
  h264_nvenc_encoder_deps="nvenc"
  h264_omx_encoder_deps="omx"
-@@ -3031,6 +3038,7 @@ hevc_cuvid_decoder_deps="cuvid"
+@@ -3059,6 +3066,7 @@ hevc_cuvid_decoder_deps="cuvid"
  hevc_cuvid_decoder_select="hevc_mp4toannexb_bsf"
  hevc_mediacodec_decoder_deps="mediacodec"
  hevc_mediacodec_decoder_select="hevc_mp4toannexb_bsf hevc_parser"
 +hevc_mf_encoder_deps="mf"
  hevc_nvenc_encoder_deps="nvenc"
- hevc_qsv_decoder_select="hevc_mp4toannexb_bsf hevc_parser qsvdec"
+ hevc_qsv_decoder_select="hevc_mp4toannexb_bsf qsvdec"
  hevc_qsv_encoder_select="hevcparse qsvenc"
-@@ -3046,6 +3054,7 @@ mjpeg_qsv_encoder_deps="libmfx"
+@@ -3075,6 +3083,7 @@ mjpeg_qsv_encoder_deps="libmfx"
  mjpeg_qsv_encoder_select="qsvenc"
  mjpeg_vaapi_encoder_deps="VAEncPictureParameterBufferJPEG"
  mjpeg_vaapi_encoder_select="cbs_jpeg jpegtables vaapi_encode"
@@ -86,7 +101,7 @@ index 3fb8f3521d..1a27d15b26 100755
  mpeg1_cuvid_decoder_deps="cuvid"
  mpeg1_v4l2m2m_decoder_deps="v4l2_m2m mpeg1_v4l2_m2m"
  mpeg2_crystalhd_decoder_select="crystalhd"
-@@ -6022,6 +6031,7 @@ check_headers io.h
+@@ -6097,6 +6106,7 @@ check_headers io.h
  check_headers linux/perf_event.h
  check_headers libcrystalhd/libcrystalhd_if.h
  check_headers malloc.h
@@ -94,19 +109,19 @@ index 3fb8f3521d..1a27d15b26 100755
  check_headers net/udplite.h
  check_headers poll.h
  check_headers sys/param.h
-@@ -6084,6 +6094,7 @@ check_type "windows.h dxva.h" "DXVA_PicParams_VP9" -DWINAPI_FAMILY=WINAPI_FAMILY
+@@ -6159,6 +6169,7 @@ check_type "windows.h dxva.h" "DXVA_PicParams_VP9" -DWINAPI_FAMILY=WINAPI_FAMILY
  check_type "windows.h d3d11.h" "ID3D11VideoDecoder"
  check_type "windows.h d3d11.h" "ID3D11VideoContext"
  check_type "d3d9.h dxva2api.h" DXVA2_ConfigPictureDecode -D_WIN32_WINNT=0x0602
 +check_func_headers mfapi.h MFCreateAlignedMemoryBuffer -lmfplat
  
  check_type "vdpau/vdpau.h" "VdpPictureInfoHEVC"
- 
+ check_type "vdpau/vdpau.h" "VdpPictureInfoVP9"
 diff --git a/libavcodec/Makefile b/libavcodec/Makefile
-index 3cd73fbcc6..c1ee8ab4df 100644
+index 28076c2c83..441059652e 100644
 --- a/libavcodec/Makefile
 +++ b/libavcodec/Makefile
-@@ -1011,6 +1011,7 @@ OBJS-$(CONFIG_LIBXAVS_ENCODER)            += libxavs.o
+@@ -1033,6 +1033,7 @@ OBJS-$(CONFIG_LIBXAVS_ENCODER)            += libxavs.o
  OBJS-$(CONFIG_LIBXAVS2_ENCODER)           += libxavs2.o
  OBJS-$(CONFIG_LIBXVID_ENCODER)            += libxvid.o
  OBJS-$(CONFIG_LIBZVBI_TELETEXT_DECODER)   += libzvbi-teletextdec.o ass.o
@@ -115,10 +130,10 @@ index 3cd73fbcc6..c1ee8ab4df 100644
  # parsers
  OBJS-$(CONFIG_AAC_LATM_PARSER)         += latm_parser.o
 diff --git a/libavcodec/allcodecs.c b/libavcodec/allcodecs.c
-index d2f9a39ce5..540ab277d1 100644
+index 54d40ebdbc..8473e5a023 100644
 --- a/libavcodec/allcodecs.c
 +++ b/libavcodec/allcodecs.c
-@@ -661,7 +661,9 @@ extern AVCodec ff_xsub_decoder;
+@@ -676,7 +676,9 @@ extern AVCodec ff_xsub_decoder;
  /* external libraries */
  extern AVCodec ff_aac_at_encoder;
  extern AVCodec ff_aac_at_decoder;
@@ -128,7 +143,7 @@ index d2f9a39ce5..540ab277d1 100644
  extern AVCodec ff_adpcm_ima_qt_at_decoder;
  extern AVCodec ff_alac_at_encoder;
  extern AVCodec ff_alac_at_decoder;
-@@ -673,6 +675,7 @@ extern AVCodec ff_ilbc_at_decoder;
+@@ -688,6 +690,7 @@ extern AVCodec ff_ilbc_at_decoder;
  extern AVCodec ff_mp1_at_decoder;
  extern AVCodec ff_mp2_at_decoder;
  extern AVCodec ff_mp3_at_decoder;
@@ -136,7 +151,7 @@ index d2f9a39ce5..540ab277d1 100644
  extern AVCodec ff_pcm_alaw_at_encoder;
  extern AVCodec ff_pcm_alaw_at_decoder;
  extern AVCodec ff_pcm_mulaw_at_encoder;
-@@ -741,6 +744,7 @@ extern AVCodec ff_libopenh264_encoder;
+@@ -757,6 +760,7 @@ extern AVCodec ff_libopenh264_encoder;
  extern AVCodec ff_libopenh264_decoder;
  extern AVCodec ff_h264_amf_encoder;
  extern AVCodec ff_h264_cuvid_decoder;
@@ -144,7 +159,7 @@ index d2f9a39ce5..540ab277d1 100644
  extern AVCodec ff_h264_nvenc_encoder;
  extern AVCodec ff_h264_omx_encoder;
  extern AVCodec ff_h264_qsv_encoder;
-@@ -755,6 +759,7 @@ extern AVCodec ff_nvenc_hevc_encoder;
+@@ -771,6 +775,7 @@ extern AVCodec ff_nvenc_hevc_encoder;
  extern AVCodec ff_hevc_amf_encoder;
  extern AVCodec ff_hevc_cuvid_decoder;
  extern AVCodec ff_hevc_mediacodec_decoder;
diff --git a/contrib/ffmpeg/A20-mf-encoder-extradata.patch b/contrib/ffmpeg/A20-mf-encoder-extradata.patch
index 7ad17baaa..8ce0ee53f 100644
--- a/contrib/ffmpeg/A20-mf-encoder-extradata.patch
+++ b/contrib/ffmpeg/A20-mf-encoder-extradata.patch
@@ -1,7 +1,7 @@
-From e05b0aee687f7a7d1f195130d5924b5704986e06 Mon Sep 17 00:00:00 2001
+From 87fe2584665de63610c0643427f02f6959086aa0 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Martin=20Storsj=C3=B6?= <martin@martin.st>
 Date: Sat, 18 Apr 2020 23:59:22 +0300
-Subject: [PATCH 2/3] mfenc: Await extradata at the end of the init function,
+Subject: [PATCH 2/4] mfenc: Await extradata at the end of the init function,
  if not available immediately
 
 The Qualcomm H264 encoder doesn't provide extradata immediately,
diff --git a/contrib/ffmpeg/A21-mf-encoder-b-frames.patch b/contrib/ffmpeg/A21-mf-encoder-b-frames.patch
index 2554d231f..117574e28 100644
--- a/contrib/ffmpeg/A21-mf-encoder-b-frames.patch
+++ b/contrib/ffmpeg/A21-mf-encoder-b-frames.patch
@@ -1,7 +1,7 @@
-From ce31dcadc2a21c1acd356839b9ee5d3b32635e6e Mon Sep 17 00:00:00 2001
+From 2e8e27c0ac6d8de3dc657e241cbcbb8c7ae94435 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?Martin=20Storsj=C3=B6?= <martin@martin.st>
 Date: Tue, 21 Apr 2020 23:39:50 +0300
-Subject: [PATCH 3/3] mfenc: Always set CODECAPI_AVEncMPVDefaultBPictureCount
+Subject: [PATCH 3/4] mfenc: Always set CODECAPI_AVEncMPVDefaultBPictureCount
 
 On the Qualcomm HEVC encoder, it's set to 1 by default, and it seems
 to be buggy in that state (every other returned packet is zero bytes),
diff --git a/contrib/ffmpeg/A22-movenc-hevc-extradata.patch b/contrib/ffmpeg/A22-movenc-hevc-extradata.patch
new file mode 100644
index 000000000..b7affbf8b
--- /dev/null
+++ b/contrib/ffmpeg/A22-movenc-hevc-extradata.patch
@@ -0,0 +1,117 @@
+From c5f13b6e90cd6433f77c1f5d2cff0e58f772618e Mon Sep 17 00:00:00 2001
+From: =?UTF-8?q?Martin=20Storsj=C3=B6?= <martin@martin.st>
+Date: Fri, 8 May 2020 14:21:32 +0300
+Subject: [PATCH 4/4] movenc: Try to extract extradata from the first HEVC
+ packet, if none set
+
+This fixes the generated files when using encoders that refuse to
+produce extradata (like Qualcomm's HEVC encoder via MediaFoundation).
+This only works for cases where the moov hasn't already been written
+(e.g. when not writing fragmented mp4 with empty_moov, unless using
+the delay_moov option).
+---
+ libavformat/hevc.c   | 61 ++++++++++++++++++++++++++++++++++++++++++++
+ libavformat/hevc.h   |  3 +++
+ libavformat/movenc.c |  5 ++++
+ 3 files changed, 69 insertions(+)
+
+diff --git a/libavformat/hevc.c b/libavformat/hevc.c
+index f621cb2f19..2c9d8f1af9 100644
+--- a/libavformat/hevc.c
++++ b/libavformat/hevc.c
+@@ -1125,3 +1125,64 @@ end:
+     av_free(start);
+     return ret;
+ }
++
++int ff_hevc_extract_parameter_sets(const uint8_t *buf_in, int size_in,
++                                   uint8_t **buf_out, int *size_out)
++{
++    int ret = 0;
++    uint8_t *buf, *end, *start = NULL;
++    AVIOContext *pb = NULL;
++
++    if (size_in < 6) {
++        /* We can't write a valid hvcC from the provided data */
++        ret = AVERROR_INVALIDDATA;
++        goto end;
++    } else if (!(AV_RB24(buf_in) == 1 || AV_RB32(buf_in) == 1)) {
++        /* Not a valid Annex B start code prefix */
++        ret = AVERROR_INVALIDDATA;
++        goto end;
++    }
++
++    ret = ff_avc_parse_nal_units_buf(buf_in, &start, &size_in);
++    if (ret < 0)
++        goto end;
++
++    ret = avio_open_dyn_buf(&pb);
++    if (ret < 0)
++        return ret;
++
++    buf = start;
++    end = start + size_in;
++
++    while (end - buf > 4) {
++        uint32_t len = FFMIN(AV_RB32(buf), end - buf - 4);
++        uint8_t type = (buf[4] >> 1) & 0x3f;
++
++        buf += 4;
++
++        switch (type) {
++        case HEVC_NAL_VPS:
++        case HEVC_NAL_SPS:
++        case HEVC_NAL_PPS:
++        case HEVC_NAL_SEI_PREFIX:
++        case HEVC_NAL_SEI_SUFFIX:
++            avio_wb32(pb, 1);
++            avio_write(pb, buf, len);
++            break;
++        default:
++            break;
++        }
++
++        buf += len;
++    }
++
++end:
++    if (pb) {
++        *size_out = avio_close_dyn_buf(pb, buf_out);
++        if (ret < 0)
++            av_freep(buf_out);
++    }
++
++    av_free(start);
++    return ret;
++}
+diff --git a/libavformat/hevc.h b/libavformat/hevc.h
+index 0f56325c1c..7c485dbecc 100644
+--- a/libavformat/hevc.h
++++ b/libavformat/hevc.h
+@@ -96,4 +96,7 @@ int ff_hevc_annexb2mp4_buf(const uint8_t *buf_in, uint8_t **buf_out,
+ int ff_isom_write_hvcc(AVIOContext *pb, const uint8_t *data,
+                        int size, int ps_array_completeness);
+ 
++int ff_hevc_extract_parameter_sets(const uint8_t *buf_in, int size_in,
++                                   uint8_t **buf_out, int *size_out);
++
+ #endif /* AVFORMAT_HEVC_H */
+diff --git a/libavformat/movenc.c b/libavformat/movenc.c
+index 32e8109268..cd91abfc79 100644
+--- a/libavformat/movenc.c
++++ b/libavformat/movenc.c
+@@ -5503,6 +5503,11 @@ int ff_mov_write_packet(AVFormatContext *s, AVPacket *pkt)
+         memcpy(trk->vos_data, par->extradata, trk->vos_len);
+         memset(trk->vos_data + trk->vos_len, 0, AV_INPUT_BUFFER_PADDING_SIZE);
+     }
++    if (trk->vos_len == 0 && par->codec_id == AV_CODEC_ID_HEVC) {
++        ret = ff_hevc_extract_parameter_sets(pkt->data, pkt->size, &trk->vos_data, &trk->vos_len);
++        if (ret < 0)
++            goto err;
++    }
+ 
+     if (par->codec_id == AV_CODEC_ID_AAC && pkt->size > 2 &&
+         (AV_RB16(pkt->data) & 0xfff0) == 0xfff0) {
+-- 
+2.17.1
+
-- 
2.17.1

